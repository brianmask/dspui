# Generated by Django 2.2.1 on 2019-06-02 13:04

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Abilities',
            fields=[
                ('abilityid', models.PositiveSmallIntegerField(db_column='abilityId', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('job', models.PositiveIntegerField()),
                ('level', models.PositiveIntegerField()),
                ('validtarget', models.PositiveSmallIntegerField(db_column='validTarget')),
                ('recasttime', models.PositiveSmallIntegerField(db_column='recastTime')),
                ('recastid', models.PositiveSmallIntegerField(db_column='recastId')),
                ('message1', models.PositiveSmallIntegerField()),
                ('message2', models.PositiveSmallIntegerField()),
                ('animation', models.PositiveSmallIntegerField()),
                ('animationtime', models.PositiveSmallIntegerField(db_column='animationTime')),
                ('casttime', models.PositiveSmallIntegerField(db_column='castTime')),
                ('actiontype', models.PositiveIntegerField(db_column='actionType')),
                ('range', models.FloatField()),
                ('isaoe', models.PositiveIntegerField(db_column='isAOE')),
                ('ce', models.SmallIntegerField(db_column='CE')),
                ('ve', models.SmallIntegerField(db_column='VE')),
                ('meritmodid', models.SmallIntegerField(db_column='meritModID')),
                ('addtype', models.SmallIntegerField(db_column='addType')),
                ('content_tag', models.CharField(blank=True, max_length=7, null=True)),
            ],
            options={
                'db_table': 'abilities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AbilitiesCharges',
            fields=[
                ('recastid', models.PositiveSmallIntegerField(db_column='recastId', primary_key=True, serialize=False)),
                ('job', models.PositiveIntegerField()),
                ('level', models.PositiveIntegerField()),
                ('maxcharges', models.PositiveIntegerField(db_column='maxCharges')),
                ('chargetime', models.PositiveSmallIntegerField(db_column='chargeTime')),
                ('meritmodid', models.PositiveSmallIntegerField(db_column='meritModID')),
            ],
            options={
                'db_table': 'abilities_charges',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccountIpRecord',
            fields=[
                ('login_time', models.DateTimeField(primary_key=True, serialize=False)),
                ('accid', models.IntegerField()),
                ('charid', models.IntegerField()),
                ('client_ip', models.TextField()),
            ],
            options={
                'db_table': 'account_ip_record',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounts',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('login', models.CharField(max_length=16)),
                ('password', models.CharField(max_length=64)),
                ('email', models.CharField(max_length=64)),
                ('email2', models.CharField(max_length=64)),
                ('timecreate', models.DateTimeField()),
                ('timelastmodify', models.DateTimeField()),
                ('content_ids', models.PositiveIntegerField()),
                ('expansions', models.PositiveSmallIntegerField()),
                ('features', models.PositiveIntegerField()),
                ('status', models.PositiveIntegerField()),
                ('priv', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'accounts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccountsBanned',
            fields=[
                ('accid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('timebann', models.DateTimeField()),
                ('timeunbann', models.DateTimeField()),
                ('banncomment', models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                'db_table': 'accounts_banned',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccountsSessions',
            fields=[
                ('accid', models.PositiveIntegerField(unique=True)),
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('targid', models.PositiveSmallIntegerField()),
                ('linkshellid1', models.PositiveIntegerField()),
                ('linkshellrank1', models.PositiveSmallIntegerField()),
                ('linkshellid2', models.PositiveIntegerField()),
                ('linkshellrank2', models.PositiveSmallIntegerField()),
                ('session_key', models.CharField(max_length=20)),
                ('server_addr', models.IntegerField()),
                ('server_port', models.PositiveSmallIntegerField()),
                ('client_addr', models.IntegerField()),
                ('client_port', models.PositiveSmallIntegerField()),
                ('version_mismatch', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'accounts_sessions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuctionHouse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemid', models.PositiveSmallIntegerField()),
                ('stack', models.PositiveIntegerField()),
                ('seller', models.PositiveIntegerField()),
                ('seller_name', models.CharField(blank=True, max_length=15, null=True)),
                ('date', models.PositiveIntegerField()),
                ('price', models.PositiveIntegerField()),
                ('buyer_name', models.CharField(blank=True, max_length=15, null=True)),
                ('sale', models.PositiveIntegerField()),
                ('sell_date', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'auction_house',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuditChat',
            fields=[
                ('lineid', models.AutoField(db_column='lineID', primary_key=True, serialize=False)),
                ('speaker', models.TextField()),
                ('type', models.TextField()),
                ('lsname', models.TextField(blank=True, db_column='lsName', null=True)),
                ('recipient', models.TextField(blank=True, null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('datetime', models.DateTimeField()),
            ],
            options={
                'db_table': 'audit_chat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuditGm',
            fields=[
                ('date_time', models.DateTimeField(primary_key=True, serialize=False)),
                ('gm_name', models.CharField(max_length=16)),
                ('command', models.CharField(max_length=40)),
                ('full_string', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'audit_gm',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Augments',
            fields=[
                ('augmentid', models.PositiveSmallIntegerField(db_column='augmentId', primary_key=True, serialize=False)),
                ('multiplier', models.SmallIntegerField()),
                ('modid', models.PositiveSmallIntegerField(db_column='modId')),
                ('value', models.SmallIntegerField()),
                ('ispet', models.IntegerField(db_column='isPet')),
                ('pettype', models.PositiveIntegerField(db_column='petType')),
            ],
            options={
                'db_table': 'augments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AutomatonSpells',
            fields=[
                ('spellid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('skilllevel', models.PositiveSmallIntegerField()),
                ('heads', models.PositiveIntegerField()),
                ('enfeeble', models.PositiveSmallIntegerField()),
                ('immunity', models.PositiveSmallIntegerField()),
                ('removes', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'automaton_spells',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BcnmBattlefield',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bcnmid', models.PositiveSmallIntegerField(db_column='bcnmId')),
                ('battlefieldnumber', models.IntegerField(blank=True, db_column='battlefieldNumber', null=True)),
                ('monsterid', models.IntegerField(db_column='monsterId')),
                ('conditions', models.IntegerField()),
            ],
            options={
                'db_table': 'bcnm_battlefield',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BcnmInfo',
            fields=[
                ('bcnmid', models.PositiveSmallIntegerField(db_column='bcnmId', primary_key=True, serialize=False)),
                ('zoneid', models.PositiveIntegerField(db_column='zoneId')),
                ('name', models.CharField(max_length=30)),
                ('fastestname', models.CharField(blank=True, db_column='fastestName', max_length=15, null=True)),
                ('fastestpartysize', models.PositiveIntegerField(db_column='fastestPartySize')),
                ('fastesttime', models.PositiveIntegerField(blank=True, db_column='fastestTime', null=True)),
                ('timelimit', models.PositiveSmallIntegerField(db_column='timeLimit')),
                ('levelcap', models.PositiveSmallIntegerField(db_column='levelCap')),
                ('partysize', models.PositiveSmallIntegerField(db_column='partySize')),
                ('lootdropid', models.PositiveSmallIntegerField(db_column='lootDropId')),
                ('rules', models.PositiveSmallIntegerField()),
                ('ismission', models.PositiveIntegerField(db_column='isMission')),
            ],
            options={
                'db_table': 'bcnm_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BcnmLoot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lootdropid', models.PositiveSmallIntegerField(db_column='LootDropId')),
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId')),
                ('rolls', models.PositiveSmallIntegerField()),
                ('lootgroupid', models.PositiveIntegerField(db_column='lootGroupId')),
            ],
            options={
                'db_table': 'bcnm_loot',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BcnmTreasureChests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bcnmid', models.PositiveSmallIntegerField(db_column='bcnmId')),
                ('battlefieldnumber', models.IntegerField(blank=True, db_column='battlefieldNumber', null=True)),
                ('npcid', models.IntegerField(db_column='npcId')),
            ],
            options={
                'db_table': 'bcnm_treasure_chests',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BlueSpellList',
            fields=[
                ('spellid', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('mob_skill_id', models.PositiveSmallIntegerField()),
                ('set_points', models.SmallIntegerField()),
                ('trait_category', models.SmallIntegerField()),
                ('trait_category_weight', models.SmallIntegerField()),
                ('primary_sc', models.SmallIntegerField()),
                ('secondary_sc', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'blue_spell_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BlueSpellMods',
            fields=[
                ('spellid', models.PositiveSmallIntegerField(db_column='spellId', primary_key=True, serialize=False)),
                ('modid', models.PositiveSmallIntegerField()),
                ('value', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'blue_spell_mods',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BlueTraits',
            fields=[
                ('trait_category', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('trait_points_needed', models.PositiveSmallIntegerField()),
                ('traitid', models.PositiveIntegerField()),
                ('modifier', models.PositiveSmallIntegerField()),
                ('value', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'blue_traits',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharBlacklist',
            fields=[
                ('charid_owner', models.PositiveIntegerField()),
                ('charid_target', models.PositiveIntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'char_blacklist',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharEffects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charid', models.PositiveIntegerField()),
                ('effectid', models.PositiveSmallIntegerField()),
                ('icon', models.PositiveSmallIntegerField()),
                ('power', models.PositiveSmallIntegerField()),
                ('tick', models.PositiveIntegerField()),
                ('duration', models.PositiveIntegerField()),
                ('subid', models.PositiveSmallIntegerField()),
                ('subpower', models.SmallIntegerField()),
                ('tier', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'char_effects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharEquip',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('slotid', models.PositiveIntegerField()),
                ('equipslotid', models.PositiveIntegerField()),
                ('containerid', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'char_equip',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharExp',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('mode', models.PositiveIntegerField()),
                ('war', models.PositiveSmallIntegerField()),
                ('mnk', models.PositiveSmallIntegerField()),
                ('whm', models.PositiveSmallIntegerField()),
                ('blm', models.PositiveSmallIntegerField()),
                ('rdm', models.PositiveSmallIntegerField()),
                ('thf', models.PositiveSmallIntegerField()),
                ('pld', models.PositiveSmallIntegerField()),
                ('drk', models.PositiveSmallIntegerField()),
                ('bst', models.PositiveSmallIntegerField()),
                ('brd', models.PositiveSmallIntegerField()),
                ('rng', models.PositiveSmallIntegerField()),
                ('sam', models.PositiveSmallIntegerField()),
                ('nin', models.PositiveSmallIntegerField()),
                ('drg', models.PositiveSmallIntegerField()),
                ('smn', models.PositiveSmallIntegerField()),
                ('blu', models.PositiveSmallIntegerField()),
                ('cor', models.PositiveSmallIntegerField()),
                ('pup', models.PositiveSmallIntegerField()),
                ('dnc', models.PositiveSmallIntegerField()),
                ('sch', models.PositiveSmallIntegerField()),
                ('geo', models.PositiveSmallIntegerField()),
                ('run', models.PositiveSmallIntegerField()),
                ('merits', models.PositiveIntegerField()),
                ('limits', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'char_exp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharInventory',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('location', models.PositiveIntegerField()),
                ('slot', models.PositiveIntegerField()),
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId')),
                ('quantity', models.PositiveIntegerField()),
                ('bazaar', models.PositiveIntegerField()),
                ('signature', models.CharField(max_length=20)),
                ('extra', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'char_inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharJobs',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('unlocked', models.PositiveIntegerField()),
                ('genkai', models.PositiveIntegerField()),
                ('war', models.PositiveIntegerField()),
                ('mnk', models.PositiveIntegerField()),
                ('whm', models.PositiveIntegerField()),
                ('blm', models.PositiveIntegerField()),
                ('rdm', models.PositiveIntegerField()),
                ('thf', models.PositiveIntegerField()),
                ('pld', models.PositiveIntegerField()),
                ('drk', models.PositiveIntegerField()),
                ('bst', models.PositiveIntegerField()),
                ('brd', models.PositiveIntegerField()),
                ('rng', models.PositiveIntegerField()),
                ('sam', models.PositiveIntegerField()),
                ('nin', models.PositiveIntegerField()),
                ('drg', models.PositiveIntegerField()),
                ('smn', models.PositiveIntegerField()),
                ('blu', models.PositiveIntegerField()),
                ('cor', models.PositiveIntegerField()),
                ('pup', models.PositiveIntegerField()),
                ('dnc', models.PositiveIntegerField()),
                ('sch', models.PositiveIntegerField()),
                ('geo', models.PositiveIntegerField()),
                ('run', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'char_jobs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharLook',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('face', models.PositiveIntegerField()),
                ('race', models.PositiveIntegerField()),
                ('size', models.PositiveIntegerField()),
                ('head', models.PositiveSmallIntegerField()),
                ('body', models.PositiveSmallIntegerField()),
                ('hands', models.PositiveSmallIntegerField()),
                ('legs', models.PositiveSmallIntegerField()),
                ('feet', models.PositiveSmallIntegerField()),
                ('main', models.PositiveSmallIntegerField()),
                ('sub', models.PositiveSmallIntegerField()),
                ('ranged', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'char_look',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharMerit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charid', models.PositiveIntegerField()),
                ('meritid', models.PositiveSmallIntegerField()),
                ('upgrades', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'char_merit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharPet',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('wyvernid', models.PositiveSmallIntegerField()),
                ('automatonid', models.PositiveSmallIntegerField()),
                ('unlocked_attachments', models.TextField(blank=True, null=True)),
                ('equipped_attachments', models.TextField(blank=True, null=True)),
                ('adventuringfellowid', models.PositiveSmallIntegerField()),
                ('chocoboid', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'char_pet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharPoints',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('sandoria_cp', models.PositiveIntegerField()),
                ('bastok_cp', models.PositiveIntegerField()),
                ('windurst_cp', models.PositiveIntegerField()),
                ('beastman_seal', models.PositiveIntegerField()),
                ('kindred_seal', models.PositiveSmallIntegerField()),
                ('kindred_crest', models.PositiveSmallIntegerField()),
                ('high_kindred_crest', models.PositiveSmallIntegerField()),
                ('sacred_kindred_crest', models.PositiveSmallIntegerField()),
                ('ancient_beastcoin', models.PositiveSmallIntegerField()),
                ('valor_point', models.PositiveSmallIntegerField()),
                ('scyld', models.PositiveSmallIntegerField()),
                ('guild_fishing', models.PositiveIntegerField()),
                ('guild_woodworking', models.PositiveIntegerField()),
                ('guild_smithing', models.PositiveIntegerField()),
                ('guild_goldsmithing', models.PositiveIntegerField()),
                ('guild_weaving', models.PositiveIntegerField()),
                ('guild_leathercraft', models.PositiveIntegerField()),
                ('guild_bonecraft', models.PositiveIntegerField()),
                ('guild_alchemy', models.PositiveIntegerField()),
                ('guild_cooking', models.PositiveIntegerField()),
                ('cinder', models.PositiveIntegerField()),
                ('fire_fewell', models.PositiveIntegerField()),
                ('ice_fewell', models.PositiveIntegerField()),
                ('wind_fewell', models.PositiveIntegerField()),
                ('earth_fewell', models.PositiveIntegerField()),
                ('lightning_fewell', models.PositiveIntegerField()),
                ('water_fewell', models.PositiveIntegerField()),
                ('light_fewell', models.PositiveIntegerField()),
                ('dark_fewell', models.PositiveIntegerField()),
                ('ballista_point', models.PositiveIntegerField()),
                ('fellow_point', models.PositiveIntegerField()),
                ('chocobuck_sandoria', models.PositiveSmallIntegerField()),
                ('chocobuck_bastok', models.PositiveSmallIntegerField()),
                ('chocobuck_windurst', models.PositiveSmallIntegerField()),
                ('research_mark', models.PositiveIntegerField()),
                ('tunnel_worm', models.PositiveIntegerField()),
                ('morion_worm', models.PositiveIntegerField()),
                ('phantom_worm', models.PositiveIntegerField()),
                ('moblin_marble', models.PositiveIntegerField()),
                ('infamy', models.PositiveSmallIntegerField()),
                ('prestige', models.PositiveSmallIntegerField()),
                ('legion_point', models.PositiveIntegerField()),
                ('spark_of_eminence', models.PositiveIntegerField()),
                ('shining_star', models.PositiveIntegerField()),
                ('imperial_standing', models.PositiveIntegerField()),
                ('runic_portal', models.PositiveIntegerField()),
                ('leujaoam_assault_point', models.PositiveIntegerField()),
                ('mamool_assault_point', models.PositiveIntegerField()),
                ('lebros_assault_point', models.PositiveIntegerField()),
                ('periqia_assault_point', models.PositiveIntegerField()),
                ('ilrusi_assault_point', models.PositiveIntegerField()),
                ('nyzul_isle_assault_point', models.PositiveIntegerField()),
                ('zeni_point', models.PositiveIntegerField()),
                ('jetton', models.PositiveIntegerField()),
                ('therion_ichor', models.PositiveIntegerField()),
                ('maw', models.PositiveIntegerField()),
                ('allied_notes', models.PositiveIntegerField()),
                ('bayld', models.PositiveIntegerField()),
                ('kinetic_unit', models.PositiveSmallIntegerField()),
                ('obsidian_fragment', models.PositiveIntegerField()),
                ('lebondopt_wing', models.PositiveSmallIntegerField()),
                ('pulchridopt_wing', models.PositiveSmallIntegerField()),
                ('mweya_plasm', models.PositiveIntegerField()),
                ('cruor', models.PositiveIntegerField()),
                ('resistance_credit', models.PositiveIntegerField()),
                ('dominion_note', models.PositiveIntegerField()),
                ('fifth_echelon_trophy', models.PositiveIntegerField()),
                ('fourth_echelon_trophy', models.PositiveIntegerField()),
                ('third_echelon_trophy', models.PositiveIntegerField()),
                ('second_echelon_trophy', models.PositiveIntegerField()),
                ('first_echelon_trophy', models.PositiveIntegerField()),
                ('cave_points', models.PositiveIntegerField()),
                ('id_tags', models.PositiveIntegerField()),
                ('op_credits', models.PositiveIntegerField()),
                ('traverser_stones', models.PositiveIntegerField()),
                ('voidstones', models.PositiveIntegerField()),
                ('kupofried_corundums', models.PositiveIntegerField()),
                ('imprimaturs', models.PositiveIntegerField()),
                ('pheromone_sacks', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'char_points',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharProfile',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('rank_points', models.PositiveIntegerField()),
                ('rank_sandoria', models.PositiveIntegerField()),
                ('rank_bastok', models.PositiveIntegerField()),
                ('rank_windurst', models.PositiveIntegerField()),
                ('fame_sandoria', models.PositiveSmallIntegerField()),
                ('fame_bastok', models.PositiveSmallIntegerField()),
                ('fame_windurst', models.PositiveSmallIntegerField()),
                ('fame_norg', models.PositiveSmallIntegerField()),
                ('fame_jeuno', models.PositiveSmallIntegerField()),
                ('fame_aby_konschtat', models.PositiveSmallIntegerField()),
                ('fame_aby_tahrongi', models.PositiveSmallIntegerField()),
                ('fame_aby_latheine', models.PositiveSmallIntegerField()),
                ('fame_aby_misareaux', models.PositiveSmallIntegerField()),
                ('fame_aby_vunkerl', models.PositiveSmallIntegerField()),
                ('fame_aby_attohwa', models.PositiveSmallIntegerField()),
                ('fame_aby_altepa', models.PositiveSmallIntegerField()),
                ('fame_aby_grauberg', models.PositiveSmallIntegerField()),
                ('fame_aby_uleguerand', models.PositiveSmallIntegerField()),
                ('fame_adoulin', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'char_profile',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharRecast',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('id', models.SmallIntegerField()),
                ('time', models.IntegerField()),
                ('recast', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'char_recast',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chars',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('accid', models.PositiveIntegerField()),
                ('charname', models.CharField(max_length=15)),
                ('nation', models.PositiveIntegerField()),
                ('pos_zone', models.PositiveSmallIntegerField()),
                ('pos_prevzone', models.PositiveSmallIntegerField()),
                ('pos_rot', models.PositiveIntegerField()),
                ('pos_x', models.FloatField()),
                ('pos_y', models.FloatField()),
                ('pos_z', models.FloatField()),
                ('moghouse', models.PositiveIntegerField()),
                ('boundary', models.PositiveSmallIntegerField()),
                ('home_zone', models.PositiveIntegerField()),
                ('home_rot', models.PositiveIntegerField()),
                ('home_x', models.FloatField()),
                ('home_y', models.FloatField()),
                ('home_z', models.FloatField()),
                ('missions', models.TextField(blank=True, null=True)),
                ('assault', models.TextField(blank=True, null=True)),
                ('campaign', models.TextField(blank=True, null=True)),
                ('quests', models.TextField(blank=True, null=True)),
                ('keyitems', models.TextField(blank=True, null=True)),
                ('set_blue_spells', models.TextField(blank=True, null=True)),
                ('abilities', models.TextField(blank=True, null=True)),
                ('weaponskills', models.TextField(blank=True, null=True)),
                ('titles', models.TextField(blank=True, null=True)),
                ('zones', models.TextField(blank=True, null=True)),
                ('playtime', models.PositiveIntegerField()),
                ('unlocked_weapons', models.TextField(blank=True, null=True)),
                ('gmlevel', models.PositiveSmallIntegerField()),
                ('mentor', models.SmallIntegerField()),
                ('campaign_allegiance', models.PositiveIntegerField()),
                ('isstylelocked', models.IntegerField()),
                ('nnameflags', models.PositiveIntegerField()),
                ('moghancement', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'chars',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharSkills',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('skillid', models.PositiveIntegerField()),
                ('value', models.PositiveSmallIntegerField()),
                ('rank', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'char_skills',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharSpells',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('charid', models.PositiveIntegerField()),
                ('spellid', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'char_spells',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharStats',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('hp', models.PositiveSmallIntegerField()),
                ('mp', models.PositiveSmallIntegerField()),
                ('nameflags', models.PositiveIntegerField()),
                ('mhflag', models.PositiveIntegerField()),
                ('mjob', models.PositiveIntegerField()),
                ('sjob', models.PositiveIntegerField()),
                ('death', models.PositiveIntegerField()),
                ('number_2h', models.PositiveIntegerField(db_column='2h')),
                ('title', models.PositiveSmallIntegerField()),
                ('bazaar_message', models.TextField(blank=True, null=True)),
                ('zoning', models.PositiveIntegerField()),
                ('mlvl', models.PositiveIntegerField()),
                ('slvl', models.PositiveIntegerField()),
                ('pet_id', models.PositiveSmallIntegerField()),
                ('pet_type', models.PositiveSmallIntegerField()),
                ('pet_hp', models.PositiveSmallIntegerField()),
                ('pet_mp', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'char_stats',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharStorage',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('inventory', models.PositiveIntegerField()),
                ('safe', models.PositiveIntegerField()),
                ('locker', models.PositiveIntegerField()),
                ('satchel', models.PositiveIntegerField()),
                ('sack', models.PositiveIntegerField()),
                ('case', models.PositiveIntegerField()),
                ('wardrobe', models.PositiveIntegerField()),
                ('wardrobe2', models.PositiveIntegerField()),
                ('wardrobe3', models.PositiveIntegerField()),
                ('wardrobe4', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'char_storage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharStyle',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('head', models.PositiveSmallIntegerField()),
                ('body', models.PositiveSmallIntegerField()),
                ('hands', models.PositiveSmallIntegerField()),
                ('legs', models.PositiveSmallIntegerField()),
                ('feet', models.PositiveSmallIntegerField()),
                ('main', models.PositiveSmallIntegerField()),
                ('sub', models.PositiveSmallIntegerField()),
                ('ranged', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'char_style',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharUnlocks',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('sandoria_supply', models.PositiveIntegerField()),
                ('bastok_supply', models.PositiveIntegerField()),
                ('windurst_supply', models.PositiveIntegerField()),
                ('mog_locker', models.PositiveIntegerField()),
                ('runic_portal', models.PositiveIntegerField()),
                ('maw', models.PositiveIntegerField()),
                ('past_sandoria_tp', models.PositiveIntegerField()),
                ('past_bastok_tp', models.PositiveIntegerField()),
                ('past_windurst_tp', models.PositiveIntegerField()),
                ('homepoints', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'char_unlocks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CharVars',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('varname', models.CharField(max_length=30)),
                ('value', models.IntegerField()),
            ],
            options={
                'db_table': 'char_vars',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ConquestSystem',
            fields=[
                ('region_id', models.IntegerField(primary_key=True, serialize=False)),
                ('region_control', models.IntegerField()),
                ('region_control_prev', models.IntegerField()),
                ('sandoria_influence', models.IntegerField()),
                ('bastok_influence', models.IntegerField()),
                ('windurst_influence', models.IntegerField()),
                ('beastmen_influence', models.IntegerField()),
            ],
            options={
                'db_table': 'conquest_system',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeliveryBox',
            fields=[
                ('charid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('charname', models.CharField(blank=True, max_length=15, null=True)),
                ('box', models.PositiveIntegerField()),
                ('slot', models.PositiveSmallIntegerField()),
                ('itemid', models.PositiveSmallIntegerField()),
                ('itemsubid', models.PositiveSmallIntegerField()),
                ('quantity', models.PositiveIntegerField()),
                ('extra', models.TextField(blank=True, null=True)),
                ('senderid', models.PositiveIntegerField()),
                ('sender', models.CharField(blank=True, max_length=15, null=True)),
                ('received', models.IntegerField()),
                ('sent', models.IntegerField()),
            ],
            options={
                'db_table': 'delivery_box',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DespoilEffects',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId', primary_key=True, serialize=False)),
                ('effectid', models.PositiveSmallIntegerField(db_column='effectId')),
            ],
            options={
                'db_table': 'despoil_effects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExpBase',
            fields=[
                ('level', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('exp', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'exp_base',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExpTable',
            fields=[
                ('level', models.IntegerField(primary_key=True, serialize=False)),
                ('r1', models.PositiveSmallIntegerField()),
                ('r2', models.PositiveSmallIntegerField()),
                ('r3', models.PositiveSmallIntegerField()),
                ('r4', models.PositiveSmallIntegerField()),
                ('r5', models.PositiveSmallIntegerField()),
                ('r6', models.PositiveSmallIntegerField()),
                ('r7', models.PositiveSmallIntegerField()),
                ('r8', models.PositiveSmallIntegerField()),
                ('r9', models.PositiveSmallIntegerField()),
                ('r10', models.PositiveSmallIntegerField()),
                ('r11', models.PositiveSmallIntegerField()),
                ('r12', models.PositiveSmallIntegerField()),
                ('r13', models.PositiveSmallIntegerField()),
                ('r14', models.PositiveSmallIntegerField()),
                ('r15', models.PositiveSmallIntegerField()),
                ('r16', models.PositiveSmallIntegerField()),
                ('r17', models.PositiveSmallIntegerField()),
                ('r18', models.PositiveSmallIntegerField()),
                ('r19', models.PositiveSmallIntegerField()),
                ('r20', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'exp_table',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FishingFish',
            fields=[
                ('fishid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('min', models.PositiveIntegerField()),
                ('max', models.PositiveIntegerField()),
                ('watertype', models.PositiveIntegerField()),
                ('size', models.PositiveIntegerField()),
                ('stamina', models.PositiveIntegerField()),
                ('log', models.PositiveIntegerField()),
                ('quest', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'fishing_fish',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FishingLure',
            fields=[
                ('lureid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('fishid', models.PositiveSmallIntegerField()),
                ('luck', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'fishing_lure',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FishingRod',
            fields=[
                ('rodid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('fishid', models.PositiveSmallIntegerField()),
                ('flag', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'fishing_rod',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FishingZone',
            fields=[
                ('zoneid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('fishid', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'fishing_zone',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildItemPoints',
            fields=[
                ('guildid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('itemid', models.PositiveSmallIntegerField()),
                ('rank', models.PositiveSmallIntegerField()),
                ('points', models.PositiveSmallIntegerField()),
                ('max_points', models.PositiveSmallIntegerField()),
                ('pattern', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'guild_item_points',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Guilds',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('points_name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'guilds',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GuildShops',
            fields=[
                ('guildid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('itemid', models.PositiveSmallIntegerField()),
                ('min_price', models.PositiveIntegerField()),
                ('max_price', models.PositiveIntegerField()),
                ('max_quantity', models.PositiveSmallIntegerField()),
                ('daily_increase', models.PositiveSmallIntegerField()),
                ('initial_quantity', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'guild_shops',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='InstanceEntities',
            fields=[
                ('instanceid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('id', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'instance_entities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='InstanceList',
            fields=[
                ('instanceid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('instance_name', models.CharField(max_length=35)),
                ('entrance_zone', models.PositiveIntegerField()),
                ('time_limit', models.PositiveIntegerField()),
                ('start_x', models.FloatField()),
                ('start_y', models.FloatField()),
                ('start_z', models.FloatField()),
                ('start_rot', models.PositiveIntegerField()),
                ('music_day', models.SmallIntegerField()),
                ('music_night', models.SmallIntegerField()),
                ('battlesolo', models.SmallIntegerField()),
                ('battlemulti', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'instance_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemArmor',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('level', models.PositiveIntegerField()),
                ('ilevel', models.IntegerField()),
                ('jobs', models.PositiveIntegerField()),
                ('mid', models.PositiveSmallIntegerField(db_column='MId')),
                ('shieldsize', models.PositiveIntegerField(db_column='shieldSize')),
                ('scripttype', models.PositiveSmallIntegerField(db_column='scriptType')),
                ('slot', models.PositiveSmallIntegerField()),
                ('rslot', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'item_armor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemBasic',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('subid', models.PositiveSmallIntegerField()),
                ('name', models.TextField()),
                ('sortname', models.TextField()),
                ('stacksize', models.PositiveIntegerField(db_column='stackSize')),
                ('flags', models.PositiveSmallIntegerField()),
                ('ah', models.PositiveIntegerField(db_column='aH')),
                ('nosale', models.PositiveIntegerField(db_column='NoSale')),
                ('basesell', models.PositiveIntegerField(db_column='BaseSell')),
            ],
            options={
                'db_table': 'item_basic',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemEquipment',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('level', models.PositiveIntegerField()),
                ('ilevel', models.IntegerField()),
                ('jobs', models.PositiveIntegerField()),
                ('mid', models.PositiveSmallIntegerField(db_column='MId')),
                ('shieldsize', models.PositiveIntegerField(db_column='shieldSize')),
                ('scripttype', models.PositiveSmallIntegerField(db_column='scriptType')),
                ('slot', models.PositiveSmallIntegerField()),
                ('rslot', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'item_equipment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemFurnishing',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('storage', models.PositiveIntegerField()),
                ('moghancement', models.PositiveSmallIntegerField()),
                ('element', models.PositiveIntegerField()),
                ('aura', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'item_furnishing',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemLatents',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId', primary_key=True, serialize=False)),
                ('modid', models.PositiveSmallIntegerField(db_column='modId')),
                ('value', models.SmallIntegerField()),
                ('latentid', models.SmallIntegerField(db_column='latentId')),
                ('latentparam', models.SmallIntegerField(db_column='latentParam')),
            ],
            options={
                'db_table': 'item_latents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemMods',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId', primary_key=True, serialize=False)),
                ('modid', models.PositiveSmallIntegerField(db_column='modId')),
                ('value', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'item_mods',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemModsPet',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId', primary_key=True, serialize=False)),
                ('modid', models.PositiveSmallIntegerField(db_column='modId')),
                ('value', models.SmallIntegerField()),
                ('pettype', models.PositiveIntegerField(db_column='petType')),
            ],
            options={
                'db_table': 'item_mods_pet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemPuppet',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('slot', models.PositiveIntegerField()),
                ('element', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'item_puppet',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemUsable',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('validtargets', models.PositiveIntegerField(db_column='validTargets')),
                ('activation', models.PositiveIntegerField()),
                ('animation', models.PositiveSmallIntegerField()),
                ('animationtime', models.PositiveIntegerField(db_column='animationTime')),
                ('maxcharges', models.PositiveIntegerField(db_column='maxCharges')),
                ('usedelay', models.PositiveIntegerField(db_column='useDelay')),
                ('reusedelay', models.PositiveIntegerField(db_column='reuseDelay')),
                ('aoe', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'item_usable',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ItemWeapon',
            fields=[
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId', primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('skill', models.PositiveIntegerField()),
                ('subskill', models.IntegerField()),
                ('ilvl_skill', models.SmallIntegerField()),
                ('ilvl_parry', models.SmallIntegerField()),
                ('ilvl_macc', models.SmallIntegerField()),
                ('dmgtype', models.PositiveIntegerField(db_column='dmgType')),
                ('hit', models.PositiveIntegerField()),
                ('delay', models.IntegerField()),
                ('dmg', models.PositiveIntegerField()),
                ('unlock_points', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'item_weapon',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='JobPoints',
            fields=[
                ('job_pointid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40)),
                ('upgrade', models.PositiveIntegerField()),
                ('jobs', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'job_points',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Linkshells',
            fields=[
                ('linkshellid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('color', models.PositiveSmallIntegerField()),
                ('poster', models.CharField(max_length=15)),
                ('message', models.TextField(blank=True, null=True)),
                ('messagetime', models.PositiveIntegerField()),
                ('postrights', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'linkshells',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Merits',
            fields=[
                ('meritid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25)),
                ('upgrade', models.PositiveIntegerField()),
                ('value', models.SmallIntegerField()),
                ('jobs', models.PositiveIntegerField()),
                ('upgradeid', models.PositiveIntegerField()),
                ('catagoryid', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'merits',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobDroplist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dropid', models.PositiveSmallIntegerField(db_column='dropId')),
                ('droptype', models.PositiveIntegerField(db_column='dropType')),
                ('groupid', models.PositiveIntegerField(db_column='groupId')),
                ('grouprate', models.PositiveSmallIntegerField(db_column='groupRate')),
                ('itemid', models.PositiveSmallIntegerField(db_column='itemId')),
                ('itemrate', models.PositiveSmallIntegerField(db_column='itemRate')),
            ],
            options={
                'db_table': 'mob_droplist',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobFamilyMods',
            fields=[
                ('familyid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('modid', models.PositiveSmallIntegerField()),
                ('value', models.SmallIntegerField()),
                ('is_mob_mod', models.IntegerField()),
            ],
            options={
                'db_table': 'mob_family_mods',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobFamilySystem',
            fields=[
                ('familyid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('family', models.TextField(blank=True, null=True)),
                ('systemid', models.PositiveIntegerField()),
                ('system', models.TextField(blank=True, null=True)),
                ('mobsize', models.PositiveIntegerField()),
                ('speed', models.PositiveIntegerField()),
                ('hp', models.PositiveIntegerField(db_column='HP')),
                ('mp', models.PositiveIntegerField(db_column='MP')),
                ('str', models.PositiveSmallIntegerField(db_column='STR')),
                ('dex', models.PositiveSmallIntegerField(db_column='DEX')),
                ('vit', models.PositiveSmallIntegerField(db_column='VIT')),
                ('agi', models.PositiveSmallIntegerField(db_column='AGI')),
                ('int', models.PositiveSmallIntegerField(db_column='INT')),
                ('mnd', models.PositiveSmallIntegerField(db_column='MND')),
                ('chr', models.PositiveSmallIntegerField(db_column='CHR')),
                ('att', models.PositiveSmallIntegerField(db_column='ATT')),
                ('def_field', models.PositiveSmallIntegerField(db_column='DEF')),
                ('acc', models.PositiveSmallIntegerField(db_column='ACC')),
                ('eva', models.PositiveSmallIntegerField(db_column='EVA')),
                ('slash', models.FloatField(db_column='Slash')),
                ('pierce', models.FloatField(db_column='Pierce')),
                ('h2h', models.FloatField(db_column='H2H')),
                ('impact', models.FloatField(db_column='Impact')),
                ('fire', models.FloatField(db_column='Fire')),
                ('ice', models.FloatField(db_column='Ice')),
                ('wind', models.FloatField(db_column='Wind')),
                ('earth', models.FloatField(db_column='Earth')),
                ('lightning', models.FloatField(db_column='Lightning')),
                ('water', models.FloatField(db_column='Water')),
                ('light', models.FloatField(db_column='Light')),
                ('dark', models.FloatField(db_column='Dark')),
                ('element', models.FloatField(db_column='Element')),
                ('detects', models.SmallIntegerField()),
                ('charmable', models.IntegerField()),
            ],
            options={
                'db_table': 'mob_family_system',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobGroups',
            fields=[
                ('groupid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('poolid', models.PositiveIntegerField()),
                ('zoneid', models.PositiveSmallIntegerField()),
                ('respawntime', models.PositiveIntegerField()),
                ('spawntype', models.PositiveIntegerField()),
                ('dropid', models.PositiveIntegerField()),
                ('hp', models.IntegerField(db_column='HP')),
                ('mp', models.IntegerField(db_column='MP')),
                ('minlevel', models.PositiveIntegerField(db_column='minLevel')),
                ('maxlevel', models.PositiveIntegerField(db_column='maxLevel')),
                ('allegiance', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mob_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobPets',
            fields=[
                ('mob_mobid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('pet_offset', models.PositiveIntegerField()),
                ('job', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mob_pets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobPoolMods',
            fields=[
                ('poolid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('modid', models.PositiveSmallIntegerField()),
                ('value', models.SmallIntegerField()),
                ('is_mob_mod', models.IntegerField()),
            ],
            options={
                'db_table': 'mob_pool_mods',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobPools',
            fields=[
                ('poolid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=24, null=True)),
                ('packet_name', models.CharField(blank=True, max_length=24, null=True)),
                ('familyid', models.PositiveSmallIntegerField()),
                ('modelid', models.CharField(max_length=20)),
                ('mjob', models.PositiveIntegerField(db_column='mJob')),
                ('sjob', models.PositiveIntegerField(db_column='sJob')),
                ('cmbskill', models.PositiveIntegerField(db_column='cmbSkill')),
                ('cmbdelay', models.PositiveSmallIntegerField(db_column='cmbDelay')),
                ('cmbdmgmult', models.PositiveSmallIntegerField(db_column='cmbDmgMult')),
                ('behavior', models.PositiveSmallIntegerField()),
                ('aggro', models.PositiveIntegerField()),
                ('true_detection', models.PositiveIntegerField()),
                ('links', models.PositiveIntegerField()),
                ('mobtype', models.PositiveSmallIntegerField(db_column='mobType')),
                ('immunity', models.IntegerField()),
                ('name_prefix', models.PositiveIntegerField()),
                ('flag', models.PositiveIntegerField()),
                ('entityflags', models.PositiveIntegerField(db_column='entityFlags')),
                ('animationsub', models.IntegerField()),
                ('hasspellscript', models.PositiveIntegerField(db_column='hasSpellScript')),
                ('spelllist', models.SmallIntegerField(db_column='spellList')),
                ('namevis', models.IntegerField()),
                ('roamflag', models.PositiveSmallIntegerField()),
                ('skill_list_id', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'mob_pools',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobSkillLists',
            fields=[
                ('skill_list_name', models.CharField(blank=True, max_length=40, null=True)),
                ('skill_list_id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('mob_skill_id', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'mob_skill_lists',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobSkills',
            fields=[
                ('mob_skill_id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('mob_anim_id', models.PositiveSmallIntegerField()),
                ('mob_skill_name', models.CharField(max_length=40)),
                ('mob_skill_aoe', models.PositiveIntegerField()),
                ('mob_skill_distance', models.FloatField()),
                ('mob_anim_time', models.PositiveSmallIntegerField()),
                ('mob_prepare_time', models.PositiveSmallIntegerField()),
                ('mob_valid_targets', models.PositiveSmallIntegerField()),
                ('mob_skill_flag', models.PositiveIntegerField()),
                ('mob_skill_param', models.SmallIntegerField()),
                ('knockback', models.IntegerField()),
                ('primary_sc', models.IntegerField()),
                ('secondary_sc', models.IntegerField()),
                ('tertiary_sc', models.IntegerField()),
            ],
            options={
                'db_table': 'mob_skills',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobSpawnMods',
            fields=[
                ('mobid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('modid', models.PositiveSmallIntegerField()),
                ('value', models.SmallIntegerField()),
                ('is_mob_mod', models.IntegerField()),
            ],
            options={
                'db_table': 'mob_spawn_mods',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobSpawnPoints',
            fields=[
                ('mobid', models.IntegerField(primary_key=True, serialize=False)),
                ('mobname', models.CharField(blank=True, max_length=24, null=True)),
                ('polutils_name', models.CharField(blank=True, max_length=50, null=True)),
                ('groupid', models.PositiveIntegerField()),
                ('pos_x', models.FloatField()),
                ('pos_y', models.FloatField()),
                ('pos_z', models.FloatField()),
                ('pos_rot', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mob_spawn_points',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MobSpellLists',
            fields=[
                ('spell_list_name', models.CharField(blank=True, max_length=30, null=True)),
                ('spell_list_id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('spell_id', models.PositiveSmallIntegerField()),
                ('min_level', models.PositiveIntegerField()),
                ('max_level', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'mob_spell_lists',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NmSpawnPoints',
            fields=[
                ('mobid', models.IntegerField(primary_key=True, serialize=False)),
                ('pos', models.PositiveIntegerField()),
                ('pos_x', models.FloatField()),
                ('pos_y', models.FloatField()),
                ('pos_z', models.FloatField()),
            ],
            options={
                'db_table': 'nm_spawn_points',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NpcList',
            fields=[
                ('npcid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=24, null=True)),
                ('polutils_name', models.CharField(blank=True, max_length=50, null=True)),
                ('pos_rot', models.PositiveIntegerField()),
                ('pos_x', models.FloatField()),
                ('pos_y', models.FloatField()),
                ('pos_z', models.FloatField()),
                ('flag', models.PositiveIntegerField()),
                ('speed', models.PositiveIntegerField()),
                ('speedsub', models.PositiveIntegerField()),
                ('animation', models.PositiveIntegerField()),
                ('animationsub', models.PositiveIntegerField()),
                ('namevis', models.PositiveIntegerField()),
                ('status', models.PositiveIntegerField()),
                ('entityflags', models.PositiveIntegerField(db_column='entityFlags')),
                ('look', models.CharField(max_length=20)),
                ('name_prefix', models.PositiveIntegerField()),
                ('content_tag', models.CharField(blank=True, max_length=14, null=True)),
                ('widescan', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'npc_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PetList',
            fields=[
                ('petid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=15)),
                ('poolid', models.PositiveIntegerField()),
                ('minlevel', models.PositiveIntegerField(db_column='minLevel')),
                ('maxlevel', models.PositiveIntegerField(db_column='maxLevel')),
                ('time', models.PositiveIntegerField()),
                ('element', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'pet_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PetName',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=15)),
            ],
            options={
                'db_table': 'pet_name',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ServerVariables',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('value', models.IntegerField()),
            ],
            options={
                'db_table': 'server_variables',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SkillCaps',
            fields=[
                ('level', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('r0', models.PositiveSmallIntegerField()),
                ('r1', models.PositiveSmallIntegerField()),
                ('r2', models.PositiveSmallIntegerField()),
                ('r3', models.PositiveSmallIntegerField()),
                ('r4', models.PositiveSmallIntegerField()),
                ('r5', models.PositiveSmallIntegerField()),
                ('r6', models.PositiveSmallIntegerField()),
                ('r7', models.PositiveSmallIntegerField()),
                ('r8', models.PositiveSmallIntegerField()),
                ('r9', models.PositiveSmallIntegerField()),
                ('r10', models.PositiveSmallIntegerField()),
                ('r11', models.PositiveSmallIntegerField()),
                ('r12', models.PositiveSmallIntegerField()),
                ('r13', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'skill_caps',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SkillchainDamageModifiers',
            fields=[
                ('chain_level', models.CharField(max_length=1, primary_key=True, serialize=False)),
                ('chain_count', models.CharField(max_length=1)),
                ('initial_modifier', models.IntegerField()),
                ('magic_burst_modifier', models.IntegerField()),
            ],
            options={
                'db_table': 'skillchain_damage_modifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SkillRanks',
            fields=[
                ('skillid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=12, null=True)),
                ('war', models.PositiveIntegerField()),
                ('mnk', models.PositiveIntegerField()),
                ('whm', models.PositiveIntegerField()),
                ('blm', models.PositiveIntegerField()),
                ('rdm', models.PositiveIntegerField()),
                ('thf', models.PositiveIntegerField()),
                ('pld', models.PositiveIntegerField()),
                ('drk', models.PositiveIntegerField()),
                ('bst', models.PositiveIntegerField()),
                ('brd', models.PositiveIntegerField()),
                ('rng', models.PositiveIntegerField()),
                ('sam', models.PositiveIntegerField()),
                ('nin', models.PositiveIntegerField()),
                ('drg', models.PositiveIntegerField()),
                ('smn', models.PositiveIntegerField()),
                ('blu', models.PositiveIntegerField()),
                ('cor', models.PositiveIntegerField()),
                ('pup', models.PositiveIntegerField()),
                ('dnc', models.PositiveIntegerField()),
                ('sch', models.PositiveIntegerField()),
                ('geo', models.PositiveIntegerField()),
                ('run', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'skill_ranks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpellList',
            fields=[
                ('spellid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20)),
                ('jobs', models.CharField(max_length=22)),
                ('group', models.PositiveIntegerField()),
                ('element', models.PositiveIntegerField()),
                ('zonemisc', models.PositiveSmallIntegerField()),
                ('validtargets', models.PositiveIntegerField(db_column='validTargets')),
                ('skill', models.PositiveIntegerField()),
                ('mpcost', models.PositiveSmallIntegerField(db_column='mpCost')),
                ('casttime', models.PositiveSmallIntegerField(db_column='castTime')),
                ('recasttime', models.PositiveIntegerField(db_column='recastTime')),
                ('message', models.PositiveSmallIntegerField()),
                ('magicburstmessage', models.SmallIntegerField(db_column='magicBurstMessage')),
                ('animation', models.PositiveSmallIntegerField()),
                ('animationtime', models.PositiveSmallIntegerField(db_column='animationTime')),
                ('aoe', models.PositiveIntegerField(db_column='AOE')),
                ('base', models.PositiveSmallIntegerField()),
                ('multiplier', models.FloatField()),
                ('ce', models.PositiveIntegerField(db_column='CE')),
                ('ve', models.PositiveIntegerField(db_column='VE')),
                ('requirements', models.IntegerField()),
                ('spell_range', models.PositiveSmallIntegerField()),
                ('content_tag', models.CharField(blank=True, max_length=7, null=True)),
            ],
            options={
                'db_table': 'spell_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StatusEffects',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('flags', models.PositiveIntegerField()),
                ('type', models.PositiveSmallIntegerField()),
                ('negative_id', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('overwrite', models.PositiveSmallIntegerField()),
                ('block_id', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('remove_id', models.PositiveSmallIntegerField()),
                ('element', models.PositiveSmallIntegerField()),
                ('min_duration', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'status_effects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SynthRecipes',
            fields=[
                ('id', models.PositiveSmallIntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('keyitem', models.PositiveIntegerField(db_column='KeyItem')),
                ('alchemy', models.PositiveIntegerField(db_column='Alchemy')),
                ('bone', models.PositiveIntegerField(db_column='Bone')),
                ('cloth', models.PositiveIntegerField(db_column='Cloth')),
                ('cook', models.PositiveIntegerField(db_column='Cook')),
                ('gold', models.PositiveIntegerField(db_column='Gold')),
                ('leather', models.PositiveIntegerField(db_column='Leather')),
                ('smith', models.PositiveIntegerField(db_column='Smith')),
                ('wood', models.PositiveIntegerField(db_column='Wood')),
                ('crystal', models.PositiveSmallIntegerField(db_column='Crystal')),
                ('hqcrystal', models.PositiveSmallIntegerField(db_column='HQCrystal')),
                ('ingredient1', models.PositiveSmallIntegerField(db_column='Ingredient1')),
                ('ingredient2', models.PositiveSmallIntegerField(db_column='Ingredient2')),
                ('ingredient3', models.PositiveSmallIntegerField(db_column='Ingredient3')),
                ('ingredient4', models.PositiveSmallIntegerField(db_column='Ingredient4')),
                ('ingredient5', models.PositiveSmallIntegerField(db_column='Ingredient5')),
                ('ingredient6', models.PositiveSmallIntegerField(db_column='Ingredient6')),
                ('ingredient7', models.PositiveSmallIntegerField(db_column='Ingredient7')),
                ('ingredient8', models.PositiveSmallIntegerField(db_column='Ingredient8')),
                ('result', models.PositiveSmallIntegerField(db_column='Result')),
                ('resulthq1', models.PositiveSmallIntegerField(db_column='ResultHQ1')),
                ('resulthq2', models.PositiveSmallIntegerField(db_column='ResultHQ2')),
                ('resulthq3', models.PositiveSmallIntegerField(db_column='ResultHQ3')),
                ('resultqty', models.PositiveIntegerField(db_column='ResultQty')),
                ('resulthq1qty', models.PositiveIntegerField(db_column='ResultHQ1Qty')),
                ('resulthq2qty', models.PositiveIntegerField(db_column='ResultHQ2Qty')),
                ('resulthq3qty', models.PositiveIntegerField(db_column='ResultHQ3Qty')),
            ],
            options={
                'db_table': 'synth_recipes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Traits',
            fields=[
                ('traitid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('job', models.PositiveIntegerField()),
                ('level', models.PositiveIntegerField()),
                ('rank', models.PositiveIntegerField()),
                ('modifier', models.PositiveSmallIntegerField()),
                ('value', models.SmallIntegerField()),
                ('content_tag', models.CharField(blank=True, max_length=7, null=True)),
                ('meritid', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'traits',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('transport', models.PositiveIntegerField()),
                ('door', models.PositiveIntegerField()),
                ('dock_x', models.FloatField()),
                ('dock_y', models.FloatField()),
                ('dock_z', models.FloatField()),
                ('dock_rot', models.PositiveIntegerField()),
                ('boundary', models.PositiveSmallIntegerField()),
                ('anim_arrive', models.PositiveIntegerField()),
                ('anim_depart', models.PositiveIntegerField()),
                ('time_offset', models.PositiveSmallIntegerField()),
                ('time_interval', models.PositiveSmallIntegerField()),
                ('time_anim_arrive', models.PositiveIntegerField()),
                ('time_waiting', models.PositiveSmallIntegerField()),
                ('time_anim_depart', models.PositiveIntegerField()),
                ('zone', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'transport',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WaterPoints',
            fields=[
                ('waterid', models.AutoField(primary_key=True, serialize=False)),
                ('zoneid', models.PositiveSmallIntegerField()),
                ('type', models.PositiveIntegerField()),
                ('pointid', models.PositiveIntegerField()),
                ('pos_x', models.FloatField()),
                ('pos_y', models.FloatField()),
                ('pos_z', models.FloatField()),
            ],
            options={
                'db_table': 'water_points',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WeaponSkills',
            fields=[
                ('weaponskillid', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('jobs', models.CharField(max_length=22)),
                ('type', models.PositiveIntegerField()),
                ('skilllevel', models.PositiveSmallIntegerField()),
                ('element', models.PositiveIntegerField()),
                ('animation', models.PositiveIntegerField()),
                ('animationtime', models.PositiveSmallIntegerField(db_column='animationTime')),
                ('range', models.PositiveIntegerField()),
                ('aoe', models.PositiveIntegerField()),
                ('primary_sc', models.IntegerField()),
                ('secondary_sc', models.IntegerField()),
                ('tertiary_sc', models.IntegerField()),
                ('main_only', models.IntegerField()),
                ('unlock_id', models.IntegerField()),
            ],
            options={
                'db_table': 'weapon_skills',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Zonelines',
            fields=[
                ('zoneline', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('fromzone', models.PositiveSmallIntegerField()),
                ('tozone', models.PositiveSmallIntegerField()),
                ('tox', models.FloatField()),
                ('toy', models.FloatField()),
                ('toz', models.FloatField()),
                ('rotation', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'zonelines',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZoneSettings',
            fields=[
                ('zoneid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('zonetype', models.PositiveSmallIntegerField()),
                ('zoneip', models.TextField()),
                ('zoneport', models.PositiveSmallIntegerField()),
                ('name', models.TextField()),
                ('music_day', models.PositiveIntegerField()),
                ('music_night', models.PositiveIntegerField()),
                ('battlesolo', models.PositiveIntegerField()),
                ('battlemulti', models.PositiveIntegerField()),
                ('restriction', models.PositiveIntegerField()),
                ('tax', models.FloatField()),
                ('misc', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'zone_settings',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ZoneWeather',
            fields=[
                ('zoneid', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('weather_day', models.PositiveSmallIntegerField()),
                ('common', models.PositiveIntegerField()),
                ('normal', models.PositiveIntegerField()),
                ('rare', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'zone_weather',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccountsParties',
            fields=[
                ('charid', models.ForeignKey(db_column='charid', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='dspdb.AccountsSessions')),
                ('partyid', models.PositiveIntegerField()),
                ('partyflag', models.PositiveSmallIntegerField()),
                ('allianceid', models.PositiveIntegerField()),
                ('timestamp', models.DateTimeField()),
            ],
            options={
                'db_table': 'accounts_parties',
                'managed': False,
            },
        ),
    ]
